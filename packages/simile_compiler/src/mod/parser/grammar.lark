// NOTE: This grammar serves only as a reference for parser.py.
//       Lark has decent syntax highlighting for BNF grammars, so this is a good place to write it.
//       This file is not intended to be used directly by any parser, including Lark.
// NOTE: Left associative operators (and thus direct left recursive productions) will be implemented as a weakly equivalent right production.
//       Ex. E -> E + T | T is equivalent to E -> T (PLUS E)* given the right implementation in the parser

//////////////////////////////////////////////////////////////////////
// Top Level Grammar
//////////////////////////////////////////////////////////////////////
// Loosely following the python grammar, just to get something executable started
// - https://docs.python.org/3/reference/grammar.html
// - https://github.com/lark-parser/lark/blob/master/lark/grammars/python.lark
start: statements?
// Each statement corresponds to one block of code. Simple statements are one-liners,
// while compound statements are blocks of code that can be indented.
statements: ((simple_stmt NEWLINE) | compound_stmt)+

// Simple Statements: expressions, operators, and literals
// TODO:
//  - del_stmt to denote the end-of-life for a var
//  - assert_stmt, raise_stmt for assertions/exceptions
simple_stmt: expr | assignment | control_flow_stmt | import_stmt

//////////////////////////////////////////////////////////////////////
// Expressions + Operators
//////////////////////////////////////////////////////////////////////
// Expression operators below follow the table of precedences from "A Logical Approach to Discrete Math"
// and some from "The Event-B Mathematical Language", 2007

// Predicate
predicate: bool_quantification | unquantified_predicate

// Quantification: Modified from Event-B 2007, S 3.2.4
bool_quantification: (FORALL | EXISTS) ident_list CDOT predicate
ident_list: ident_pattern (COMMA ident_pattern)* // This will not be associative - stored as a flat list
ident_pattern: IDENTIFIER
             | L_PAREN ident_list R_PAREN // Allows for maplet destructuring like in python or regular B
             | ident_pattern (MAPLET ident_pattern)* // Left associative, or just store in a flat list?

// Other predicate forms: Modified from Event-B 2007, S 3.2.4, LADM, and Python grammar
unquantified_predicate: unquantified_predicate (EQUIVALENT | NOT_EQUIVALENT) implication | implication
implication: impl | rev_impl | disjunction
impl: disjunction IMPLIES implication
rev_impl: implication REV_IMPLIES disjunction
disjunction: conjunction (OR conjunction)*
conjunction: negation (AND negation)*
negation: (NOT | BANG) negation | atom_bool

atom_bool: TRUE | FALSE
         | L_PAREN predicate R_PAREN
         | pair_expr [comp_op pair_expr]

comp_op: EQUALS | NOT_EQUALS | IS | IS_NOT
        | LT | GT | LE | GE
        | IN | NOT_IN
        | SUBSET | SUBSET_EQ | SUPERSET | SUPERSET_EQ
        | NOT_SUBSET | NOT_SUBSET_EQ | NOT_SUPERSET | NOT_SUPERSET_EQ


// Other non-bool expressions
expr: quantification | predicate //| pair_expr  // Grammar is ambiguous here between pair_expr and predicate, but we prefer pair_expr
                                             // It is a little awkward, but we want bools to have the lowest precedence while separated from other types of expressions
// Quantification
quantification: lambdadef | quantification_op quantification_body
quantification_op: UNION_ALL | INTERSECTION_ALL
quantification_body: (ident_list CDOT predicate VBAR expr) // where expr differs from dummy vars
                   | (expr VBAR predicate) // were expr == dummy vars
lambdadef: LAMBDA ident_list CDOT predicate VBAR expr //maybe ident_pattern instead?

// Continue expression derivation
pair_expr: pair_expr MAPLET rel_set_expr | rel_set_expr // left associative
rel_set_expr: set_expr rel_set_op rel_set_expr | set_expr // right associative
rel_set_op: RELATION
          | TOTAL_RELATION
          | SURJECTIVE_RELATION
          | TOTAL_SURJECTIVE_RELATION
          | PARTIAL_FUNCTION
          | TOTAL_FUNCTION
          | PARTIAL_INJECTION
          | TOTAL_INJECTION
          | PARTIAL_SURJECTION
          | TOTAL_SURJECTION
          | BIJECTION
set_expr: interval_expr (UNION interval_expr)*
        | interval_expr (CARTESIAN_PRODUCT interval_expr)*
        | interval_expr (RELATION_OVERRIDING interval_expr)*
        | interval_expr (COMPOSITION interval_expr)*
        | interval_expr (INTERSECTION interval_expr)* rel_sub_expr?
        | interval_expr (DOMAIN_SUBTRACTION | DOMAIN_RESTRICTION) interval_expr (INTERSECTION interval_expr)* rel_sub_expr?
rel_sub_expr: (RANGE_SUBTRACTION | RANGE_RESTRICTION | DIFFERENCE) interval_expr
interval_expr: arithmmetic_expr UPTO arithmetic_expr | arithmetic_expr

// Numerical expressions
arithmetic_expr: arithmetic_expr add_ops term | term
add_ops: PLUS | MINUS
term: term mult_ops factor | factor
mult_ops: STAR | SLASH | PERCENT
factor: un_op factor | power
un_op: PLUS | MINUS
power: primary DOUBLE_STAR factor | primary

// Notation for working with objects
primary: struct_access | call | image | inversable_atom
inversable_atom: inversable_atom INVERSE | atom
struct_access: primary DOT IDENTIFIER
call: primary L_PAREN (expr (COMMA expr)*)? R_PAREN
image: primary L_BRACKET expr R_BRACKET
// slice: [equivalence] (_COLON [equivalence])+ // if we ever want python like list indexing, we could always just use lst[1][2][...] for multidimensional access though

// Literals
atom: literals
     | collections
     | builtin_functions
     | L_PAREN expr R_PAREN
     | IDENTIFIER
literals: INTEGER | FLOAT | STRING | TRUE | FALSE | NONE
collections: set | sequence | bag | //relation
expr_list: expr (COMMA expr)*
set: L_BRACE (expr_list | quantification_body)? R_BRACE
sequence: L_BRACKET (expr_list | quantification_body)? R_BRACKET
// relation: L_BRACE (ident_list | quantification_body) R_BRACE // relations have the same syntax as sets? determine this after parsing?
bag: L_BRACE_BAR (expr_list | quantification_body)? R_BRACE_BAR
builtin_functions: POWERSET L_PAREN expr R_PAREN
                 | NONEMPTY_POWERSET L_PAREN expr R_PAREN // ...maybe builtin functions should use a library, not keywords?
                //  cardinality, domain, range, projections 1 and 2, min/max, id, union/inter, etc...


//////////////////////////////////////////////////////////////////////
// Statements: function calls, iterables, struct access
//////////////////////////////////////////////////////////////////////
// Also include control flow statements (return, break, continue, pass)
control_flow_stmt: RETURN expr? | BREAK | CONTINUE | PASS
// Also include assignment
assignment: struct_access [COLON expr] ASSIGN expr // need to be careful - maybe struct access is too broad? could just use IDENTIFIER (DOT IDENTIFIER)*
typed_name: IDENTIFIER [COLON expr]

//////////////////////////////////////////////////////////////////////
// Compound Statements: Blocks of code that can be indented
//////////////////////////////////////////////////////////////////////
// TODO:
//  - try_stmt for exception handling
//  - with_stmt for context managers? probably not
//  - while_stmt?
//  - match_stmt
compound_stmt: if_stmt | for_stmt | while_stmt | struct_stmt | func_stmt //| enum_stmt
if_stmt: IF predicate COLON block (elif_stmt | else_stmt)?
elif_stmt: ELIF predicate COLON block (elif_stmt | else_stmt)?
else_stmt: ELSE COLON block
for_stmt: FOR ident_list IN expr COLON block
while_stmt: WHILE predicate COLON block
struct_stmt: STRUCT IDENTIFIER COLON NEWLINE INDENT ((typed_name (((COMMA NEWLINE?) | NEWLINE) typed_name)*) | PASS) DEDENT
// enum should just be an assignment of a set literal with free identifiers
// enum_stmt: ENUM IDENTIFIER COLON NEWLINE INDENT ((IDENTIFIER (((COMMA NEWLINE?) | NEWLINE) IDENTIFIER)*) | PASS) DEDENT
procedure_stmt: DEF IDENTIFIER L_PAREN (typed_name (COMMA typed_name)*)? R_PAREN RIGHTARROW expr COLON block
block: simple_stmt | NEWLINE INDENT statements DEDENT

// Import statments - no aliasing for now
import_stmt: IMPORT import_path
           | FROM import_path IMPORT import_list
import_path: STRING
// import_name: DOT? IDENTIFIER (DOT IDENTIFIER)*
import_list: STAR
           | IDENTIFIER (COMMA IDENTIFIER)*
           | L_PAREN IDENTIFIER (COMMA IDENTIFIER)* R_PAREN
