@book{DTandDS,
  title={Data Types and Data Structures},
  author={Martin, J.J.},
  isbn={9780131959835},
  lccn={lc85012373},
  series={Prentice-Hall International series in personal computing},
  url={https://books.google.ca/books?id=554ZAQAAIAAJ},
  year={1986},
  publisher={Prentice-Hall International}
}

@book{ADTspec,
  title={Abstract Data Types: Their Specification, Representation, and Use},
  author={Thomas, P.G. and Robinson, H. and Emms, J.},
  isbn={9780198596639},
  lccn={88005236},
  series={Oxford applied mathematics and computing science series},
  url={https://books.google.ca/books?id=u61QAAAAMAAJ},
  year={1988},
  publisher={Clarendon Press}
}

@book{learnHaskell,
  title={Learn You a Haskell for Great Good!: A Beginner's Guide},
  author={Lipovaca, M.},
  isbn={9781593272838},
  lccn={2011000790},
  series={No Starch Press Series},
  url={https://books.google.ca/books?id=R2RbBAAAQBAJ},
  year={2011},
  publisher={No Starch Press}
}

% TODO remove?
@online{haskellWikipedia,
    author={Wikipedia contributors},
    title={Type class --- Wikipedia},
    url={https://en.wikipedia.org/wiki/Type_class},
    urldate={2025-02-07},
    year={2025}
}

% TODO remove if unneeded?
% TODO should these and below software docs be contained as authors or as organizations?
@online{typeclassopedia,
    organization={HaskellWiki},
    title={Typeclassopedia --- HaskellWiki},
    url={https://wiki.haskell.org/index.php?title=Typeclassopedia},
    urldate={2025-02-07},
    year={2022}
}

@online{typeHaskellWiki,
    organization={HaskellWiki},
    title={Type --- HaskellWiki},
    url={https://wiki.haskell.org/index.php?title=Type},
    urldate={2025-02-07},
    year={2024}
}

@online{python,
    organization={Python Software Foundation},
    title={The Python Language Reference (3.13.2)},
    url={https://docs.python.org/3/reference/},
    urldate={2025-02-07},
    year={2025}
}

@online{pythonZen,
    organization={Python Software Foundation},
    title={PEP 20 - The Zen of Python},
    url={https://peps.python.org/pep-0020/},
    urldate={2025-02-07},
    year={2004}
}

@online{pythonGenericTypeChange,
    organization={Python Software Foundation},
    title={PEP 695 - Type Parameter Syntax},
    url={https://peps.python.org/pep-0695/},
    urldate={2025-02-07},
    year={2022}
}

@online{pydantic,
    organization={Python Software Foundation},
    title={Pydantic},
    url={https://docs.pydantic.dev/latest/},
    urldate={2025-02-07},
    year={2025}
}

@manual{uml,
    organization={Object Management Group},
    title={OMG Unified Modeling Language},
    version={2.5.1},
    url={https://www.omg.org/spec/UML/2.5.1/PDF},
    urldate={2025-02-07},
    year={2017}
}

@online{agda,
    title={Welcome to Agda's documentation!},
    url={https://agda.readthedocs.io/en/v2.7.0.1/#},
    version={2.7.0.1},
    urldate={2025-02-07},
    year={2025}
}

@online{apl,
    title={LearningAPL},
    url={https://xpqz.github.io/learnapl/intro.html},
    urldate={2025-02-07},
    year={2024}
}

@online{eventB,
    title={Event-B and Rodin Documentation Wiki},
    url={https://wiki.event-b.org/index.php/Main_Page},
    urldate={2025-02-07},
    year={2024}
}

@book{eventBBook,
    address = {Cambridge},
    booktitle = {Modeling in Event-B : system and software engineering},
    abstract = {A practical text suitable for an introductory or advanced course in formal methods, this book presents a mathematical approach to modelling and designing systems using an extension of the B formal method: Event-B. Based on the idea of refinement, the author's systematic approach allows the user to construct models gradually and to facilitate a systematic reasoning method by means of proofs. Readers will learn how to build models of programs and, more generally, discrete systems, but this is all done with practice in mind. The numerous examples provided arise from various sources of computer system developments, including sequential programs, concurrent programs and electronic circuits. The book also contains a large number of exercises and projects ranging in difficulty. Each of the examples included in the book has been proved using the Rodin Platform tool set, which is available free for download at www.event-b.org.},
    author = {Abrial, Jean-Raymond},
    publisher = {Cambridge University Press},
    title = {Modeling in Event-B : system and software engineering },
    year = {2010},
    isbn = {9781139195881},
    keywords = {Formal methods (Computer science) ; B method (Computer science) ; Computer science -- Mathematical models ; Computer systems -- Verification},
    language = {eng},
}

@online{dafny,
    title={The Dafny Programming and Verification Language},
    url={https://dafny.org/},
    urldate={2025-02-07},
    year={2024}
}

@online{cpp,
    title={C++ reference},
    url={https://en.cppreference.com/w/},
    urldate={2025-02-07},
    year={2024}
}

@book{rustBook,
  title={The Rust Programming Language, 2nd Edition},
  author={Klabnik, S. and Nichols, C.},
  isbn={9781718503106},
  lccn={2023287801},
  url={https://books.google.ca/books?id=SE2GEAAAQBAJ},
  year={2023},
  publisher={No Starch Press}
}

@online{rustReference,
    title={The Rust Reference},
    url={https://doc.rust-lang.org/reference/},
    urldate={2025-02-07},
    year={2024}
}

@online{typescript,
    title={Typescript Documentation},
    url={https://www.typescriptlang.org/docs/},
    urldate={2025-02-07},
    year={2024}
}

@online{typescriptBlog,
    author={Rosenwasser, D.},
    title={Announcing Typescript 5.0},
    url={https://devblogs.microsoft.com/typescript/announcing-typescript-5-0/#decorators},
    urldate={2025-02-07},
    year={2024}
}

@online{typescriptBlog2,
    author={Rauschmayer, A.},
    title={JavaScript metaprogramming with the 2022-03 decorators API},
    url={https://2ality.com/2022/10/javascript-decorators.html},
    urldate={2025-02-07},
    year={2024}
}

@article{notationForThought,
    author = {Iverson, Kenneth E.},
    title = {Notation as a tool of thought},
    year = {1980},
    issue_date = {Aug. 1980},
    publisher = {Association for Computing Machinery},
    address = {New York, NY, USA},
    volume = {23},
    number = {8},
    issn = {0001-0782},
    url = {https://doi.org/10.1145/358896.358899},
    doi = {10.1145/358896.358899},
    journal = {Commun. ACM},
    month = aug,
    pages = {444–465},
    numpages = {22},
    keywords = {mathematical notation, APL}
}

@online{isAplDead,
    author={Hsu, A.},
    title={Is APL Dead?},
    url={https://www.sacrideo.us/is-apl-dead/},
    urldate={2025-02-07},
    year={2020}
}

@online{rust2017,
    author={Turon, A.},
    title={Rust's language ergonomics initiative},
    url={https://blog.rust-lang.org/2017/03/02/lang-ergonomics.html},
    urldate={2025-02-07},
    year={2017}
}

@inproceedings{empiricalTypePython,
    author = {Di Grazia, Luca and Pradel, Michael},
    title = {The evolution of type annotations in python: an empirical study},
    year = {2022},
    isbn = {9781450394130},
    publisher = {Association for Computing Machinery},
    address = {New York, NY, USA},
    url = {https://doi.org/10.1145/3540250.3549114},
    doi = {10.1145/3540250.3549114},
    abstract = {Type annotations and gradual type checkers attempt to reveal errors and facilitate maintenance in dynamically typed programming languages. Despite the availability of these features and tools, it is currently unclear how quickly developers are adopting them, what strategies they follow when doing so, and whether adding type annotations reveals more type errors. This paper presents the first large-scale empirical study of the evolution of type annotations and type errors in Python. The study is based on an analysis of 1,414,936 type annotation changes, which we extract from 1,123,393 commits among 9,655 projects. Our results show that (i) type annotations are getting more popular, and once added, often remain unchanged in the projects for a long time, (ii) projects follow three evolution patterns for type annotation usage -- regular annotation, type sprints, and occasional uses -- and that the used pattern correlates with the number of contributors, (iii) more type annotations help find more type errors (0.704 correlation), but nevertheless, many commits (78.3\%) are committed despite having such errors. Our findings show that better developer training and automated techniques for adding type annotations are needed, as most code still remains unannotated, and they call for a better integration of gradual type checking into the development process.},
    booktitle = {Proceedings of the 30th ACM Joint European Software Engineering Conference and Symposium on the Foundations of Software Engineering},
    pages = {209–220},
    numpages = {12},
    keywords = {type errors, empirical study, Type annotations, Python},
    location = {Singapore, Singapore},
    series = {ESEC/FSE 2022}
}

@incollection{leino2009specification,
  title={Specification and verification of object-oriented software},
  author={Leino, K Rustan M},
  booktitle={Engineering Methods and Tools for Software Safety and Security},
  pages={231--266},
  year={2009},
  publisher={IOS Press}
}
