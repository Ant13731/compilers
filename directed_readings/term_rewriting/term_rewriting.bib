@book{baader1998term,
  title={Term Rewriting and All That},
  author={Baader, F. and Nipkow, T.},
  isbn={9780521779203},
  lccn={97028286},
  series={Term Rewriting and All that},
  url={https://books.google.ca/books?id=N7BvXVUCQk8C},
  year={1998},
  publisher={Cambridge University Press}
}

@book{cooke1998constructing,
  title={Constructing Correct Software: The Basics},
  author={Cooke, J.},
  isbn={9783540761563},
  lccn={97026050},
  series={Formal Approaches to Computing and Inf},
  url={https://books.google.ca/books?id=N3whAQAAIAAJ},
  year={1998},
  publisher={Springer}
}

@article{elco1998building,
author = {Visser, Eelco and Benaissa, Zine-el-Abidine and Tolmach, Andrew},
title = {Building program optimizers with rewriting strategies},
year = {1998},
issue_date = {Jan. 1999},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {34},
number = {1},
issn = {0362-1340},
url = {https://doi.org/10.1145/291251.289425},
doi = {10.1145/291251.289425},
abstract = {We describe a language for defining term rewriting strategies, and its application to the production of program optimizers. Valid transformations on program terms can be described by a set of rewrite rules; rewriting strategies are used to describe when and how the various rules should be applied in order to obtain the desired optimization effects. Separating rules from strategies in this fashion makes it easier to reason about the behavior of the optimizer as a whole, compared to traditional monolithic optimizer implementations. We illustrate the expressiveness of our language by using it to describe a simple optimizer for an ML-like intermediate representation.The basic strategy language uses operators such as sequential composition, choice, and recursion to build transformers from a set of labeled unconditional rewrite rules. We also define an extended language in which the side-conditions and contextual rules that arise in realistic optimizer specifications can themselves be expressed as strategy-driven rewrites. We show that the features of the basic and extended languages can be expressed by breaking down the rewrite rules into their primitive building blocks, namely matching and building terms in variable binding environments. This gives us a low-level core language which has a clear semantics, can be implemented straightforwardly and can itself be optimized. The current implementation generates C code from a strategy specification.},
journal = {SIGPLAN Not.},
month = sep,
pages = {13â€“26},
numpages = {14}
}

@inproceedings{buchberger1996mathematica,
  title={Mathematica as a rewrite language},
  author={Buchberger, Bruno},
  booktitle={Proceedings of the 2nd Fuji International Workshop on Functional and Logic Programming},
  pages={1--13},
  year={1996},
  organization={World Scientific}
}

@article{mircea2004rule,
title = {Rule-Based Programming with Mathematica Mircea Marin},
author = {Marin, Mircea and Piroi, Florina},
year = {2004},
month = {05}
}

@online{catln,
    author={Kimberg, Zach},
    title={Catln Language Summary},
    url={https://catln.dev/},
    urldate={2025-03-14},
    year={2025}
}

@online{meander,
    author={Miller, Jeremy},
    title={Introduction to Term Rewriting with Meander},
    url={https://jimmyhmiller.github.io/meander-rewriting},
    urldate={2025-03-14},
    year={2023}
}

@online{spoofax,
    title={Strategic Rewriting},
    url={https://spoofax.dev/background/stratego/strategic-rewriting/strategic-rewriting/},
    urldate={2025-03-14},
    year={2023}
}

@book{thomas1971catalogue,
  title={A Catalogue of Optimizing Transformations},
  author={Thomas J. Watson IBM Research Center and Allen, F.E. and Cocke, J.},
  url={https://books.google.ca/books?id=oeXaZwEACAAJ},
  year={1971},
  publisher={IBM Thomas J. Watson Research Center}
}


